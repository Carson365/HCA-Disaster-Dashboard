@page "/tree/{LocID}"
@using AISComp.Tools
@inject IJSRuntime jsRuntime
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Collections.Concurrent


<PageTitle>Tree</PageTitle>


<OrgMainLayout CurrentLocID="@LocID">
	<div class="top-row">
		<a class="branding oi oi-home" href=""></a>
		<a class="branding"><b>@($"{CSVLoader.Locations.First(x => x.ID==LocID).Name}")</b></a>
	</div>
	<body>
		<div class="treeContainer">
		</div>
	</body>
</OrgMainLayout>


@code {
    [Parameter] public required string LocID { get; set; }

    private List<Employee>? SearchResults;

    protected override void OnInitialized()
    {
        CSVLoader.OnLoaded += () => StateHasChanged();
        SearchResults = CSVLoader.GetLocationOrgTree(LocID);
    }

    private JsonSerializerOptions options = new JsonSerializerOptions
        {
            PropertyNamingPolicy = null,
            ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles
        };

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first && SearchResults != null)
        {
            Dictionary<string, Employee> trimmedCache = new();
            Employee startingEmployee = SearchResults[0];
            Employee trimmedSelectedEmployee = CSVLoader.GetTrimmedSelectedEmployee(startingEmployee, LocID, trimmedCache);

            Dictionary<string, Employee> allTopUps = new();
            foreach (Employee emp in SearchResults)
            {
                var e = CSVLoader.GetTrimmedSelectedEmployee(emp, LocID, trimmedCache);
                allTopUps.TryAdd(e.ID, e);
            }

            Employee dummyEmployee = new Employee
                {
                    ID = "Connected employees have no supervisor",
                    Name = "Organization Root",
                    Position = "",
                    LocationID = LocID,
                    HireDate = "",
                    Up = null,
                    Downs = new ConcurrentBag<Employee>(allTopUps.Values)
                };

            var emps = JsonSerializer.Serialize(dummyEmployee, options);
            IJSObjectReference jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/jsTree.js");
            await jsModule.InvokeVoidAsync("runTree", emps);
        }
    }
}

