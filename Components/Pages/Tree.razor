@page "/tree"
@using AISComp.Tools
@using AISComp.Components.Shared
@inject IJSRuntime jsRuntime
@using System.Text.Json;
@using System.Text.Json.Serialization;

<PageTitle>Tree</PageTitle>


<OrgMainLayout>
	<body>
		<div class="container">
		</div>
	</body>
</OrgMainLayout>


@code {
	private int visibleCount;

	protected override void OnInitialized()
	{
		CSVLoader.OnLoaded += () => StateHasChanged();
		CSVLoader.GetLocationOrgTree();
	}

	private JsonSerializerOptions options = new JsonSerializerOptions
		{
			PropertyNamingPolicy = null,
			ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles
		};

	protected override async Task OnAfterRenderAsync(bool first)
	{
		if (first)
		{



			// Assume CSVLoader.SelectedEmployee is one of the employees in the location.
			Employee startingEmployee = CSVLoader.SearchResults[0];
			string locationId = CSVLoader.SelectedLocation.ID;

			// Get the trimmed tree (only employees at the selected location).
			Employee trimmedSelectedEmployee = CSVLoader.GetTrimmedSelectedEmployee(startingEmployee, locationId);
			// var emps = JsonSerializer.Serialize(trimmedSelectedEmployee, options);

			Dictionary<string,Employee> allTopUps = new();

			foreach (Employee emp in CSVLoader.SearchResults)
			{
				var e = CSVLoader.GetTrimmedSelectedEmployee(emp, locationId);
				allTopUps.TryAdd(e.ID, e);
			}

			Console.WriteLine("All top ups: " + allTopUps.Count());

			Employee dummyEmployee = new Employee()
				{
					ID = "a",
					Name = "a",
					Position = "a",
					LocationID = locationId,
					HireDate = DateTime.Now.ToString(),
					Up = null,
					Downs = new List<Employee>(allTopUps.Values)
				};

			Console.WriteLine("Total: " + "a");

			var emps = JsonSerializer.Serialize(dummyEmployee, options);



			// var sel = CSVLoader.SearchResults[0];
			// while (sel.Up != null) sel = sel.Up;
			// var emps = JsonSerializer.Serialize(sel, options);


			IJSObjectReference jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/jsTree.js");
			await jsModule.InvokeVoidAsync("runTree", emps); // Ensure the map is initialized
		}
	}
}