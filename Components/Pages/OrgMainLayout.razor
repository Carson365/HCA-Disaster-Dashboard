@page "/tree/{LocID}"
@inherits LayoutComponentBase
@inject IJSRuntime jsRuntime
@inject NavigationManager NavManager
@inject HttpClient Http

<PageTitle>HCA Healthcare</PageTitle>

<div class="page">
    <main>
        <!-- Render the Tree component -->
        <Tree LocID="@LocID" />

        @if (searchEnabled)
        {
            <div class="left-sidebar sidebar">
                <form>
                    <input type="text" placeholder="Search..." @bind="SearchQuery" @bind:event="oninput" />
                </form>

                <div class="radio-group">
                    <span>Search by:</span>
                    @foreach (var item in new string[] { "Name", "ID", "Role" })
                    {
                        <label style="margin-left: 0.75em;">
                            <input type="radio" name="searchType" id="@item" value="@item"
                                   @onchange="RadioSelection"
                                   checked="@(searchType.Equals(item, StringComparison.OrdinalIgnoreCase))" />
                            <label for="@item">@item</label>
                        </label>
                    }
                </div>

                <select @bind="SelectedLocationId">
                    <option value="">All locations</option>
                    @foreach (var group in GroupedLocations)
                    {
                        <optgroup label="@group.State">
                            @foreach (var loc in group.Locations)
                            {
                                <option value="@loc.ID">@loc.Name</option>
                            }
                        </optgroup>
                    }
                </select>

                @if (searchResults != null && visibleCount != 0)
                {
                    @foreach (Employee item in searchResults.Take(visibleCount))
                    {
                        <div class="box" @onclick="() => SelectEmployee(item.ID)"
                             @onmouseover="() => HoverEmployee(item.ID)"
                             @onmouseout="() => HoverEmployee(String.Empty)">
                            <EmployeeCard Employee="@item" showLoc="@(SelectedLocationId == "")"></EmployeeCard>
                        </div>
                    }
                }
            </div>
        }

        @if (!string.IsNullOrEmpty(selectedEmployeeId))
        {
            <div class="right-sidebar sidebar">
                <div>
                    <EmployeeCard Employee="@CSVLoader.EmployeeList.FirstOrDefault(e => e.ID == selectedEmployeeId)"
                                  showLoc="true"></EmployeeCard>
                </div>
                <div>
                    <button class="goto-button" @onclick="GoToSelectedEmployee">Go To Employee</button>
                </div>
                <div>
                    <button class="cut-button" @onclick="CutEmployee">Cut Employee</button>
                    <button class="paste-button" @onclick="PasteEmployee">Paste Employee</button>
                </div>
            </div>
        }
    </main>
</div>

@code {
    [Parameter] public string LocID { get; set; } = string.Empty;
    IJSObjectReference? jsModule;

    // Local copies of session employee IDs.
    private string selectedEmployeeId = string.Empty;
    private string cutEmployeeId = string.Empty;

    bool searchEnabled = true;
    string searchType = "Name";
    private int visibleCount;
    private List<Employee> searchResults = new();

    public class LocationGroup
    {
        public string State { get; set; } = string.Empty;
        public List<Location> Locations { get; set; } = new();
    }

    List<LocationGroup> GroupedLocations => CSVLoader.Locations
        .GroupBy(loc => loc.State)
        .OrderBy(g => g.Key)
        .Select(g => new LocationGroup
            {
                State = g.Key,
                Locations = g.OrderBy(loc => loc.Name).ToList()
            }).ToList();

    private string _selectedLocationId = string.Empty;
    public string SelectedLocationId
    {
        get => _selectedLocationId;
        set
        {
            if (_selectedLocationId != value)
            {
                _selectedLocationId = value;
                SearchEmployee();
            }
        }
    }

    private string _searchQuery = string.Empty;
    public string SearchQuery
    {
        get => _searchQuery;
        set
        {
            if (_searchQuery != value)
            {
                _searchQuery = value;
                SearchEmployee();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Set HttpClient BaseAddress if it's not already set.
        if (Http.BaseAddress is null)
        {
            Http.BaseAddress = new Uri(NavManager.BaseUri);
        }

        SelectedLocationId = LocID;
        await LoadSessionState();
        SearchEmployee();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || jsModule == null)
        {
            jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/jsTree.js");
            await jsModule.InvokeVoidAsync("setDNCallback", DotNetObjectReference.Create(this));
        }
    }

    private async Task LoadSessionState()
    {
        // Load user-specific state from our API endpoints.
        selectedEmployeeId = await Http.GetStringAsync("api/EmployeeSession/selected");
        cutEmployeeId = await Http.GetStringAsync("api/EmployeeSession/cut");
    }

    [JSInvokable]
    public async Task SelectEmployee(string empID)
    {
        selectedEmployeeId = empID;
        await Http.PostAsJsonAsync("api/EmployeeSession/selected", empID);
        await HoverEmployee(empID);
        StateHasChanged();
    }

    private async Task GoToSelectedEmployee()
    {
        if (!string.IsNullOrEmpty(selectedEmployeeId))
        {
            var employee = CSVLoader.EmployeeList.FirstOrDefault(e => e.ID == selectedEmployeeId);
            if (employee != null && LocID != employee.LocationID)
            {
                NavManager.NavigateTo($"/tree/{employee.LocationID}", forceLoad: false);
            }
            await Task.Delay(100);
            await HoverEmployee(selectedEmployeeId);
        }
    }

    private async Task HoverEmployee(string ID)
    {
        if (jsModule != null)
        {
            await jsModule.InvokeVoidAsync("highlightEmployee", ID);
        }
    }

    private async Task CutEmployee()
    {
        if (!string.IsNullOrEmpty(selectedEmployeeId))
        {
            cutEmployeeId = selectedEmployeeId;
            await Http.PostAsJsonAsync("api/EmployeeSession/cut", cutEmployeeId);
            if (jsModule != null)
            {
                await jsModule.InvokeVoidAsync("grayOutEmployee", selectedEmployeeId);
            }
        }
    }

    private async Task PasteEmployee()
    {
        if (!string.IsNullOrEmpty(cutEmployeeId) &&
            !string.IsNullOrEmpty(selectedEmployeeId) &&
            cutEmployeeId != selectedEmployeeId)
        {
            CSVLoader.EmployeeRemap.Add((CSVLoader.EmployeeList.First(e => e.ID == cutEmployeeId),
                                          CSVLoader.EmployeeList.First(e => e.ID == selectedEmployeeId)));
            CSVLoader.ApplyEmployeeRemap(CSVLoader.EmployeeList, CSVLoader.EmployeeRemap);

            // Clear cut employee state.
            cutEmployeeId = string.Empty;
            await Http.PostAsJsonAsync("api/EmployeeSession/cut", string.Empty);

            NavManager.NavigateTo($"/tree/{selectedEmployeeId}", forceLoad: false);
            await Task.Delay(100);
            await HoverEmployee(selectedEmployeeId);
        }
    }

    private void RadioSelection(ChangeEventArgs e)
    {
        searchType = e.Value?.ToString() ?? "Name";
        SearchEmployee();
    }

    private void SearchEmployee()
    {
        visibleCount = 100;
        searchResults = string.IsNullOrEmpty(SelectedLocationId)
            ? CSVLoader.EmployeeList.Where(employee =>
                (searchType == "ID" && employee.ID.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (searchType == "Name" && employee.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (searchType == "Role" && employee.Position.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)))
                .ToList()
            : CSVLoader.GetTrimmedEmployeeList(SelectedLocationId).Where(employee =>
                (searchType == "ID" && employee.ID.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (searchType == "Name" && employee.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (searchType == "Role" && employee.Position.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)))
                .ToList();

        if (string.IsNullOrEmpty(SearchQuery))
            visibleCount = 0;
    }
}
