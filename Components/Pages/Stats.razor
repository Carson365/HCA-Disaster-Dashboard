@inherits LayoutComponentBase
@inject IJSRuntime jsRuntime
@page "/stats/{Fip}"
@using System.Text.Json

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Data Visualization</title>
</head>

<body>
	<div id="main">

	<nav class="navbar">
    	<a class="navbar-brand" href="/" id="back-button">
        	<button class="btn">Back to Map</button>
    	</a>
    	<div class="navbar-title">
        	<h2 id="statsTitle"></h2>
    	</div>
    	<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
            	aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        	<span class="navbar-toggler-icon"></span>
   		 </button>
    		<div class="collapse navbar-collapse" id="navbarNav">
    		</div>
		</nav>


		<div class="Zcontent">

			<div class="Zcolumn x2">
				<div class="Zcard">
					<div class="Zcard-content" id="stackedAreaChart"></div>
				</div>
				<div class="Zcard squish">
					<div class="Zcard-content" id="statePieChart"></div>
					<div class="Zcard-content" id="countyPieChart"></div>
				</div>
				<div class="Zcard squish">
					<div class="Zcard-content" id="stateDamagePieChart"></div>
					<div class="Zcard-content" id="countyDamagePieChart"></div>
				</div>
				<div class="Zcard tall">
					<div class="Zcard-content" id="stateDamageBarChart"></div>
				</div>
				<div class="Zcard">
					<div class="Zcard-content" id="stackedBarChart"></div>
				</div>
				<div class="Zcard tall">
					<div class="Zcard-content" id="stateHeatMap"></div>
				</div>
			</div>
			<div class="Zcolumn x1">				
				<div class="tableHolder">
					<table class="table table-striped">
						<tbody id="countyDisasterList"></tbody>
					</table>
				</div>
				<div class="tableHolder">
					<table class="table table-striped">
						<tbody id="stateDisasterList"></tbody>
					</table>
				</div>
			</div>

		</div>
	</div>
</body>

@code {

	[Parameter] public required string Fip { get; set; }

	private JsonSerializerOptions options = new JsonSerializerOptions
		{
			PropertyNamingPolicy = null,
		};

	protected override async Task OnAfterRenderAsync(bool first)
	{
		if (first)
		{
			IJSObjectReference jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Charts/main.js");
			_ = Task.Run(() => jsModule.InvokeVoidAsync("createCharts", Fip, JsonSerializer.Serialize(CSVLoader.Disasters.Where(d => d.FIPSStateCode == $"{Fip[0]}{Fip[1]}"), options)));
		}
	}
}