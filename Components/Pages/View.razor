@page "/view"
@using AISComp.Tools
@using AISComp.Components.Shared
@* @inject CSVLoader employeeService *@

<PageTitle>View</PageTitle>

<OrgMainLayout>
<main>
		@if (!CSVLoader.IsLoading)
	{
		<!-- Manager (Up) -->
		<div class="container">
@* 			<div class="leftFade"></div> *@
			<div class="leftSpacer"></div>
				@if (CSVLoader.SelectedEmployee?.Up != null)
			{
				<div class="box up">
						<EmployeeCard Employee="@CSVLoader.SelectedEmployee.Up" />

					<div class="nav-item">
							<NavLink class="custom" @onclick="() => CSVLoader.SelectedEmployee = CSVLoader.SelectedEmployee.Up">
							<span class="oi oi-magnifying-glass" aria-hidden="true"></span> &nbsp Expand
						</NavLink>
					</div>
				</div>
			}

		</div>
		<!-- Selected Employee and Siblings (Up.Downs) -->
		<div class="container">
			<div class="leftFade"></div>
			<div class="leftSpacer"></div>
			<div class="box primary">
					<EmployeeCard Employee="@CSVLoader.SelectedEmployee" />
			</div>

				@if (CSVLoader.SelectedEmployee?.Up?.Downs != null)
			{
					foreach (var item in CSVLoader.SelectedEmployee.Up.Downs.Where(e => e != CSVLoader.SelectedEmployee))
				{
					<div class="box subprimary">
						<EmployeeCard Employee="@item" />
						<div class="nav-item">
								<NavLink class="custom" @onclick="() => CSVLoader.SelectedEmployee = item">
								<span class="oi oi-magnifying-glass" aria-hidden="true"></span> &nbsp Expand
							</NavLink>
						</div>
					</div>
				}
			}
		</div>
		<!-- Subordinates (Downs) -->
		<div class="container">
			<div class="leftFade"></div>
			<div class="leftSpacer"></div>
				@if (CSVLoader.SelectedEmployee?.Downs != null)
			{
					@foreach (var item in CSVLoader.SelectedEmployee.Downs)
				{
					<div class="box down">
						<EmployeeCard Employee="@item" />
						<div class="nav-item">
								<NavLink class="custom" @onclick="() => CSVLoader.SelectedEmployee = item">
								<span class="oi oi-magnifying-glass" aria-hidden="true"></span> &nbsp Expand
							</NavLink>
						</div>
					</div>
				}
			}
		</div>
	}
</main>
</OrgMainLayout>

@code {
	protected override void OnInitialized()
	{
		CSVLoader.OnLoaded += () => StateHasChanged();
		// _ = LoadEmployeesInBackground();
		// return Task.CompletedTask;
	}

	// private async Task LoadEmployeesInBackground()
	// {
	// 	await CSVLoader.LoadEmployeesAsync();
	// 	// refreshSearch();
	// 	StateHasChanged();
	// }
}
