@inject IJSRuntime jsRuntime
@using AISComp.Tools
@using FileHelpers;



<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<div id="map" style="pointer-events: auto; background-color:  rgba(200,220,230, 80%);
	width: 100%;
	height: 100%;
	z-index: 1;"></div>
@if (selectedLocation != null)
{
	<div id="right">
		<b>Facility Name:</b> @selectedLocation.FacName
		<br><b>Time Zone:</b> @selectedLocation.TimeZone
		<br><b>Location:</b> @selectedLocation.FacCity, @selectedLocation.FacState
		<br><b>Division Name:</b> @selectedLocation.DivName
		<br><b>MediTech Network:</b> @selectedLocation.NetworkMeditech
	</div>
}

@code
{

	public Location? selectedLocation;

	[Parameter] public static Location[] locations { get; set; } = InitializeLocations();

	private static Location[] InitializeLocations()
	{
		FileHelperEngine<Location> engine = new FileHelperEngine<Location> { Options = { IgnoreFirstLines = 1 } };
		return engine.ReadFile("Data\\hcaData.csv");
	}

	protected override async Task OnAfterRenderAsync(bool first)
	{
		if (first)
		{
			IJSObjectReference jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/runMapThings.js");
			await jsModule.InvokeVoidAsync("runMapThings"); // Ensure the map is initialized
			await jsModule.InvokeVoidAsync("setDotNetHelper", DotNetObjectReference.Create(this));

			var tasks = locations.Select(i => assignPin(i, jsModule));
			await Task.WhenAll(tasks);
		}
	}

	private async Task assignPin(Location? place, IJSObjectReference jsModule)
	{
		if (place == null) return;

		string color = place.DivName switch
		{
			"Supply Chain" => "blue",
			"HSC" => "green",
			_ when place.FacName.Contains("Hub Sites") => "yellow",
			_ => "red"
		};

		await jsModule.InvokeVoidAsync("runCommon", color, place);
	}

	[JSInvokable("InvokeIt")]
	public Task InvokeIt(Location input)
	{
		selectedLocation = input;
		StateHasChanged();
		return Task.CompletedTask;
	}
}