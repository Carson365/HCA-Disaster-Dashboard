@inject IJSRuntime jsRuntime
@using AISComp.Tools
@using FileHelpers;
@* @inject CSVLoader data *@


<link rel="stylesheet" href="/leaflet/leaflet.css" />
<script src="leaflet/leaflet.js"></script>

<div id="map" style="pointer-events: auto; background-color:  rgba(200,220,230, 80%);
	width: 100%;
	height: 100%;
	z-index: 1;"></div>
@if (CSVLoader.SelectedLocation != null)
{
	<div id="right">
		<b>Facility Name:</b> @CSVLoader.SelectedLocation.Name
		@* <br><b>Time Zone:</b> @CSVLoader.selectedLocation.TimeZone *@
		<br><b>Location:</b> @CSVLoader.SelectedLocation.City, @CSVLoader.SelectedLocation.State
		@* <br><b>Division Name:</b> @CSVLoader.selectedLocation.DivName
		<br><b>MediTech Network:</b> @CSVLoader.selectedLocation.NetworkMeditech *@
		<br><NavLink href="org" class="underline"> Org </NavLink>
	</div>
}

@code
{

	protected override async Task OnAfterRenderAsync(bool first)
	{
		if (first)
		{
			IJSObjectReference jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/runMapThings.js");
			await jsModule.InvokeVoidAsync("runMapThings"); // Ensure the map is initialized
			await jsModule.InvokeVoidAsync("setDotNetHelper", DotNetObjectReference.Create(this));

			var tasks = CSVLoader.Locations.Select(i => assignPin(i, jsModule));
			await Task.WhenAll(tasks);
		}
	}

	private async Task assignPin(Location? place, IJSObjectReference jsModule)
	{
		if (place == null) return;

		// string color = place.DivName switch
		// {
		// 	"Supply Chain" => "blue",
		// 	"HSC" => "green",
		// 	_ when place.Name.Contains("Hub Sites") => "yellow",
		// 	_ => "red"
		// };
		string color = "green";

		await jsModule.InvokeVoidAsync("runCommon", color, place);
	}

	[JSInvokable("InvokeIt")]
	public Task InvokeIt(Location input)
	{
		CSVLoader.SelectedLocation = input;
		StateHasChanged();
		return Task.CompletedTask;
	}
}