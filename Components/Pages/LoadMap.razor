@page "/map"
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@using AISComp.Tools
@using FileHelpers
@using System.Text.Json
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="/leaflet/leaflet.css" />
<script src="leaflet/leaflet.js"></script>

<div id="map" style="pointer-events: auto; background-color: rgba(200,220,230,80%);
	width: 100%; height: 100%; z-index: 1;"></div>

@if (CSVLoader.SelectedLocation != null)
{
	<div id="right">
		<br><h3><b>@CSVLoader.SelectedLocation.Name</b></h3>
		@CSVLoader.SelectedLocation.City, @CSVLoader.SelectedLocation.State (@CSVLoader.County County)
		<br>@CSVLoader.SelectedLocation.Size.ToString() Employees
@* 		<br><NavLink href="tree" class="underline"> View Organization Chart </NavLink>
		<br><NavLink href="stats" class="underline"> See State and County Disaster Statistics </NavLink> *@

		<div class="nav-item px-3">
			<NavLink class="nav-link" href="tree" Match="NavLinkMatch.All">
				<span class="oi oi-people" aria-hidden="true"></span> View Organization Chart
			</NavLink>
		</div>
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="stats" Match="NavLinkMatch.All">
				<span class="oi oi-pie-chart" aria-hidden="true"></span> See State and County Disaster Statistics
			</NavLink>
		</div>

@* 		<div class="nav-item px-3">
			<NavLink class="nav-link" href="org" Match="NavLinkMatch.All">
				<span class="oi oi-home" aria-hidden="true"></span> Home
			</NavLink>
		</div> *@
	</div>
}

@code {

	// Options for JSON serialization.
	private JsonSerializerOptions options = new JsonSerializerOptions
		{
			PropertyNamingPolicy = null,
		};

	protected override async Task OnAfterRenderAsync(bool first)
	{
		if (first)
		{
			IJSObjectReference jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/runMapThings.js");
			await jsModule.InvokeVoidAsync("runMapThings"); // Initialize the map
			await jsModule.InvokeVoidAsync("setDotNetHelper", DotNetObjectReference.Create(this));
			// Call runCommon once to add initial hexes
			await assignPins(CSVLoader.Locations, jsModule);
		}
	}

	private async Task assignPins(List<Location> places, IJSObjectReference jsModule)
	{
		if (places == null || places.Count == 0) return;
		string color = "#03173E";
		string json = JsonSerializer.Serialize(places, options);
		await jsModule.InvokeVoidAsync("runCommon", color, json);
		if (CSVLoader.SelectedLocation != null)
		{
			await jsModule.InvokeVoidAsync("reSelect", JsonSerializer.Serialize(CSVLoader.SelectedLocation, options));
		}
	}

	// When a location is selected from the map (or hex is clicked),
	[JSInvokable("InvokeIt")]
	public async Task InvokeIt(Location input, string fip, string County)
	{
		if (fip != null) CSVLoader.Fip = fip;
		if (County != null) CSVLoader.County = County;
		CSVLoader.SelectedLocation = input;
		StateHasChanged();
	}

	[JSInvokable("County")]
	public async Task County(string fip)
	{
		CSVLoader.Fip = fip;
		NavigationManager.NavigateTo("/Stats");
    }
}
