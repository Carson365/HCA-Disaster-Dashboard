@page "/map"
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@using AISComp.Tools
@using FileHelpers
@using System.Text.Json

<link rel="stylesheet" href="/leaflet/leaflet.css" />
<script src="leaflet/leaflet.js"></script>
@* <script src="leaflet/leaflet-event-forwarder.js"></script>
 *@
<div id="map" style="pointer-events: auto; background-color: rgba(200,220,230,80%);
	width: 100%; height: 100%; z-index: 1;"></div>

@if (CSVLoader.SelectedLocation != null)
{
	<div id="right">
		<b>Facility Name:</b> @CSVLoader.SelectedLocation.Name
		<br><b>Location:</b> @CSVLoader.SelectedLocation.City, @CSVLoader.SelectedLocation.State
		<br><b>Size:</b> @CSVLoader.SelectedLocation.Size.ToString()
		<br><NavLink href="tree" class="underline"> Tree </NavLink>
	</div>
}

@code {

	// Options for JSON serialization.
	private JsonSerializerOptions options = new JsonSerializerOptions
		{
			PropertyNamingPolicy = null,
		};

	protected override async Task OnAfterRenderAsync(bool first)
	{
		if (first)
		{
			IJSObjectReference jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/runMapThings.js");
			await jsModule.InvokeVoidAsync("runMapThings"); // Initialize the map
			await jsModule.InvokeVoidAsync("setDotNetHelper", DotNetObjectReference.Create(this));
			// Call runCommon once to add initial hexes
			await assignPins(CSVLoader.Locations, jsModule);
		}
	}

	private async Task assignPins(List<Location> places, IJSObjectReference jsModule)
	{
		if (places == null || places.Count == 0) return;
		string color = "green";
		string json = JsonSerializer.Serialize(places, options);
		await jsModule.InvokeVoidAsync("runCommon", color, json);
	}

	// When a location is selected from the map (or hex is clicked),
	[JSInvokable("InvokeIt")]
	public async Task InvokeIt(Location input)
	{
		CSVLoader.SelectedLocation = input;
		StateHasChanged();
	}
}
